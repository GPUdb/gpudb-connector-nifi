package com.gisfederal.gpudb.processors.GPUdbNiFi;


import static org.junit.Assert.assertEquals;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.nifi.util.MockFlowFile;
import org.apache.nifi.util.TestRunners;
import org.apache.nifi.util.TestRunner;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.gpudb.GPUdbException;
import com.gpudb.Type;
import com.gpudb.protocol.ShowTableRequest;
import com.gpudb.protocol.ShowTableResponse;



public class TestPutKineticaFromCSV extends TestBase {

    protected static TestRunner runner;

    private final static Logger LOG = Logger.getLogger( TestPutKineticaFromCSV.class );
    
    private static List<String> tablesToClear;

    @Before
    public void initialize() {
        // Initialize the list of table names for deleting them afterward
        tablesToClear = new ArrayList<>();

        // Get a test runner
        runner = TestRunners.newTestRunner( com.gisfederal.gpudb.processors.GPUdbNiFi.PutKineticaFromFile.class );

        // Set the DB related properties
        runner.setProperty( KineticaConstants.SERVER_URL, gpudb.getURL().toString() );
    }

    @After
    public void deleteTables() throws Exception {
        // Delete all the tables generated by the tests
        for ( int i = 0; i < tablesToClear.size(); ++i ) {
            clearTable( tablesToClear.get( i ) );
        }
    }



    @Test
    public void testImportFromCsvSucceeds() throws GPUdbException {
        // Create a table with a few columns
        String tableName = generateTableName();
        tablesToClear.add( tableName );

        Type type = new Type(
            new Type.Column("x", Integer.class),
            new Type.Column("y", Integer.class)
        );

        gpudb.createTable(tableName, type.create( gpudb ), null);

        // Set the table name for the processor configuration
        runner.setProperty( KineticaConstants.TABLE_NAME, tableName );

        // In this test case, we're mocking a CSV file with a few valid rows
        // (with the header)
        InputStream content = new ByteArrayInputStream("x,y\n1,1\n2,2\n3,3\n4,4\n".getBytes());

        // Add content to the runner
        runner.enqueue( content );

        // Run the enequeued content
        runner.run();

        // All content should be processed without failure
        runner.assertQueueEmpty();

        // Check that the table has the correct number of rows
        Map<String, String> showTableOptions = gpudb.options( ShowTableRequest.Options.GET_SIZES,
                                                              ShowTableRequest.Options.TRUE );
        ShowTableResponse response = gpudb.showTable( tableName, showTableOptions );
        assertEquals( "Table size mismatch;",
                      4, response.getTotalSize() );
    }  // end testImportFromCsvSucceeds


    @Test
    public void testBadCsvRowGoesToFailure() throws GPUdbException {
        // Create a table with a few columns
        String tableName = generateTableName();
        tablesToClear.add( tableName );

        Type type = new Type(
            new Type.Column("x", Integer.class),
            new Type.Column("y", Integer.class)
        );

        gpudb.createTable(tableName, type.create( gpudb ), null);

        // Set the table name for the processor configuration
        runner.setProperty( KineticaConstants.TABLE_NAME, tableName );

        // In this test case, we're mocking a CSV file with a few valid rows
        // and one invalid row (with the header)
        InputStream content = new ByteArrayInputStream("x,y\n1,1\n,2\n3,3\n4,4\n,5\n".getBytes());

        // Add content to the runner
        runner.enqueue( content );

        // Run the enequeued content
        runner.run();

        // All content should be processed without failure
        runner.assertQueueEmpty();

        // Check that the table has the correct number of rows
        Map<String, String> showTableOptions = gpudb.options( ShowTableRequest.Options.GET_SIZES,
                                                              ShowTableRequest.Options.TRUE );
        ShowTableResponse response = gpudb.showTable( tableName, showTableOptions );
        assertEquals( "Table size mismatch;",
                      3, response.getTotalSize() );

        // Ensure that the failure relationship got the two bad records
        // along with the header
        List<MockFlowFile> failureResults = runner.getFlowFilesForRelationship( KineticaConstants.FAILURE );
        assertEquals( "Single flow file for failure; ", 1, failureResults.size() );
        MockFlowFile failureFlowFile = failureResults.get( 0 );
        String failureFlowFileContent = new String( runner.getContentAsByteArray( failureFlowFile ) );
        LOG.info( "Failure flow file content: " + failureFlowFileContent );
        String expectedFailureFlowFileContent = "x,y\n,2\n,5\n";
        failureFlowFile.assertContentEquals( expectedFailureFlowFileContent );
    }  // end testBadCsvRowGoesToFailure



}  // end TestPutKineticaFromCSV


